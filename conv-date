#!/usr/bin/python3
#+
# Convert a date/time to different timezones. Invoke this script
# as follows:
#
#     conv-date [opts...] <date-time> <timezone> ...
#
# where <date-time> is a date/time string in any of the formats
# acceptable to the date(1) command, and the remaining arguments
# are one or more timezone specs. The specified date-time is
# output in each of the corresponding timezones. The valid opts
# are “--rfc-2822” and “--rfc-3339={date|seconds|ns}”; for the
# meanings of these, see the date(1) man page.
#
# An empty timezone is treated as local time.
#
# For example, the command
#
#     conv-date now UTC CET US/Pacific Asia/Kuala_Lumpur NZ
#
# shows the current time in UTC, Central European, US West Coast,
# Malaysian and New Zealand timezones.
#
# Another example: show a time, given in another time zone:
#
#     TZ=Asia/Shanghai ./conv-date '15-Jun-2015 13:00' '' UTC Asia/Kolkata
#
# shows the specified date/time, interpreted according to China time,
# is displayed in that time zone, UTC, and India time.
#
# Copyright 2015 Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <http://creativecommons.org/licenses/by/4.0/>.
#-

import sys
import os
import subprocess
import getopt

def get_default_timezone() :
    "tries to get the name of the current default timezone."
    result = env.get("TZ", None)
    if result == None :
        # see if /etc/localtime is a symlink to a zoneinfo file, and
        # get the timezone name from the filename if so
        try :
            tz_link = os.readlink("/etc/localtime")
        except OSError :
            tz_link = None
        #end try
        if tz_link != None :
            parent_dir = "/zoneinfo/"
            result = tz_link[tz_link.index(parent_dir) + len(parent_dir):]
        #end if
    #end if
    return \
        result
#end get_default_timezone

#+
# Mainline
#-

(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["rfc-2822", "rfc-3339="]
  )
date_args = []
for keyword, value in opts :
    if keyword == "--rfc-2822" :
        date_args.append(keyword)
    elif keyword == "--rfc-3339" :
        date_args.append(keyword + "=" + value)
    #end if
#end for
if len(args) < 2 :
    raise getopt.GetoptError("usage: {} <date-time> <timezone> ...".format(sys.argv[0]))
#end if
date_args = tuple(date_args)
timestamp = int(subprocess.check_output
  (
    args = ("date", "-d", args[0], "+%s"),
  ).strip())
env = dict(os.environ)
default_timezone = get_default_timezone()
for timezone in args[1:] :
    if timezone != "" :
        env["TZ"] = timezone
    elif default_timezone != None :
        env["TZ"] = default_timezone
        timezone = default_timezone
    else :
        env.pop("TZ", None)
    #end if
    sys.stdout.write \
      (
        "{tz:.<24}: {date}\n".format
          (
            tz = timezone,
            date =
                subprocess.check_output
                  (
                    args = ("date",) + date_args + ("-d", "1970-01-01 00:00:00Z + {} seconds".format(timestamp)),
                    env = env,
                  ).strip().decode("utf-8"),
          )
      )
#end for
